local flow = require "ludobits.m.flow"
local gesture = require "game.gesture"
local monarch = require "monarch.monarch"
local rps = require "game.rps"
local opponents = require "game.opponents"

local function show_dialog(portrait, text)
	msg.post("dialog", "show", { text = text, portrait = portrait })
end

local function hide_dialog()
	msg.post("dialog", "hide")
end

local function update_opponent(opponent, health)
	msg.post("opponent#portrait", "play_flipbook", { id = opponent.portrait })
	label.set_text("opponent#text", opponent.name)
	for i=1,4 do
		msg.post("opponent#health" .. i, health.opponent >= i and "enable" or "disable")
	end
end

local function update_player(player, health)
	msg.post("player#portrait", "play_flipbook", { id = player.portrait })
	for i=1,4 do
		msg.post("player#health" .. i, health.player >= i and "enable" or "disable")
	end
end


local function point_to_screen(p)
	return vmath.vector3(35 + (p.x * 250), 284 + ((p.y - 0.5) * 250), 0)
end

local function show_gesture(symbol)
	local gesture = rps.get(symbol)
	particlefx.play("touch#particlefx")
	local points = gesture.points
	go.set_position(point_to_screen(points[1]), "touch")
	for i=2,#gesture.points do
		local pos = point_to_screen(points[i])
		flow.go_animate("touch", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, 0.2)
	end
	particlefx.stop("touch#particlefx")
end

local function tutorial(message)
	print("tutorial", msg.url())
	msg.post(".", "acquire_input_focus")

	local game = { rounds = message.rounds }
	local opponent = opponents[message.opponent]
	local player = { portrait = hash("player") }
	local health = { player = 6, opponent = 3 }
	update_opponent(opponent, health)
	update_player(player, health)

	
	show_dialog(opponent.portrait, "Welcome to the Academy of Rock, Paper & Scissors!")
	flow.until_input_released()
	
	show_dialog(opponent.portrait, "Ok, lets get started!\n\nThe first rule of RPS is that Rock beats Scissors. Got it?")
	flow.until_input_released()
	while true do
		show_dialog(opponent.portrait, "Now pay attention. The sign for Rock looks like this. Ready?")
		flow.until_input_released()
		hide_dialog()
		flow.delay(0.8)
		show_gesture(rps.ROCK)
		flow.delay(2)
		show_dialog(opponent.portrait, "Ok? Now it is your turn. Make a Rock for me. Go on, I'm waiting.")
		flow.until_input_pressed()
		hide_dialog()
		local _, message = flow.until_message(hash("gesture"))
		if message.gesture.symbol == rps.ROCK then
			break
		end
	end

	show_dialog(opponent.portrait, "Excellent! The second rule of RPS is that Paper beats Rock.\n\nThe sign for Paper looks like this.")
	flow.until_input_released()
	while true do
		hide_dialog()
		flow.delay(0.8)
		show_gesture(rps.PAPER)
		flow.delay(2)
		show_dialog(opponent.portrait, "Easy, right? Let me see if you understood. Hurry up! I haven't got all day")
		flow.until_input_pressed()
		hide_dialog()
		local _, message = flow.until_message(hash("gesture"))
		if message.gesture.symbol == rps.PAPER then
			break
		end
		show_dialog(sopponent.portrait, "No no no! I hate repeating myself but here we go again. Ready?")
		flow.delay(1.5)
	end

	show_dialog(opponent.portrait, "Brilliant! The third rule of RPS is that Scissors beats Paper.\n\nScissors looks like this.")
	flow.until_input_released()
	while true do
		hide_dialog()
		flow.delay(0.8)
		show_gesture(rps.SCISSORS)
		flow.delay(2)
		show_dialog(opponent.portrait, "Got it? Show me how to do Scissors. And don't mess up.")
		flow.until_input_pressed()
		hide_dialog()
		local _, message = flow.until_message(hash("gesture"))
		if message.gesture.symbol == rps.SCISSORS then
			break
		end
		show_dialog(opponent.portrait, "No, that's not what I showed you. Pay attention! Ok?")
		flow.until_input_released()
	end

	show_dialog(opponent.portrait, [[You're a natural! I think you're ready for a proper fight!

I'm going to throw some Rocks, Papers and Scissors your way.

Let me know when you are ready.]])
	flow.until_input_released()
	hide_dialog()

	while true do
		msg.post("#normal", "start", { opponent = "tutorial", opponent_health = health.opponent, player_health = health.player })
		local message_id, message = flow.until_message(hash("game_finished"))

		local health = message.health
		
		if health.player > 0 then
			show_dialog(opponent.portrait, "Well done! Now you know everything there is to know about Rock, Paper and Scissors.")
			flow.until_input_released()
			hide_dialog()
			monarch.show(hash("menu"))
			return
		elseif health.opponent > 0 then
			show_dialog(opponent.portrait, "Ah too bad! Better luck next time. Let's try again. Ready?")
			flow.until_input_released()
			hide_dialog()
		end
	end
end


function init(self)
	self.gesture = gesture.create(rps.GESTURES)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == hash("start") then
		flow(function() tutorial(message) end)
	end
end

function on_input(self, action_id, action)
	flow.on_input(action_id, action)
	local g = self.gesture.on_input(action_id, action)
	if g then
		print("gesture", g.group)
		msg.post("#", "gesture", { gesture = g })
	end
end
