local flow = require "ludobits.m.flow"
local gesture = require "game.gesture"
local monarch = require "monarch.monarch"
local rps = require "game.rps"
local signal = require "ludobits.m.signal"

local OPPONENTS = require "game.opponents"

local GESTURE = signal.create("gesture")

local function animate_symbol(id, duration, delay)
	duration = duration or 6
	delay = delay or 0
	go.cancel_animations(id, "position.y")
	go.animate(id, "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position(id).y - 2000, go.EASING_LINEAR, duration, delay, function()
		go.delete(id)
		SYMBOL_MISS.trigger()
	end)
end

local function show_dialog(portrait, text)
	msg.post("dialog", "show", { text = text, portrait = portrait })
end

local function hide_dialog()
	msg.post("dialog", "hide")
end

local function update_opponent(opponent, health)
	msg.post("opponent#portrait", "play_flipbook", { id = opponent.portrait })
	label.set_text("opponent#text", opponent.name)
	for i=1,4 do
		msg.post("opponent#health" .. i, health.opponent >= i and "enable" or "disable")
	end
end

local function update_player(player, health)
	msg.post("player#portrait", "play_flipbook", { id = player.portrait })
	for i=1,4 do
		msg.post("player#health" .. i, health.player >= i and "enable" or "disable")
	end
end

local function normal_game(message, sender)
	print("normal_game", msg.url())
	msg.post(".", "acquire_input_focus")

	local game = { rounds = message.rounds }
	local opponent = OPPONENTS[message.opponent]
	local player = { portrait = hash("player") }
	local health = { player = message.player_health, opponent = message.opponent_health }
	local symbols = {}
	update_opponent(opponent, health)
	update_player(player, health)
	
	GESTURE.add(function(gesture)
		local id = rps.spawn_symbol(gesture.symbol, vmath.vector3(160, -200, 0), { collisions = false })
		go.animate(id, "position", go.PLAYBACK_ONCE_PINGPONG, vmath.vector3(160, 200, 0), go.EASING_INOUTSINE, 1, 0, function()
			go.delete(id)
		end)
		local closest = table.remove(symbols, 1)
		if closest then
			local outcome = rps.evaluate(gesture.symbol, closest.symbol)
			if outcome == rps.WIN then
				health.opponent = health.opponent - 1
				update_opponent(opponent, health)
			elseif outcome == rps.LOSS then
				health.player = health.player - 1
				update_player(player, health)
			end
			go.delete(closest.id)
		end
	end)
	
	label.set_text("ready#label", "Ready?")
	flow.delay(1)
	label.set_text("ready#label", "3")
	flow.delay(1)
	label.set_text("ready#label", "2")
	flow.delay(1)
	label.set_text("ready#label", "1")
	flow.delay(1)
	label.set_text("ready#label", "")

	local pattern_index = 1
	while true do
		local char = opponent.pattern:sub(pattern_index, pattern_index)
		local symbol = rps.char_to_symbol(char)
		local id = rps.spawn_symbol(symbol)
		table.insert(symbols, { id = id, symbol = symbol })
		go.cancel_animations(id, "position.y")
		go.animate(id, "position.y", go.PLAYBACK_ONCE_FORWARD, -100, go.EASING_LINEAR, opponent.speed, 0, function()
			go.delete(id)
			health.player = health.player - 1
			update_player(player, health)
		end)
		
		flow.delay(opponent.interval)
		
		pattern_index = pattern_index + 1
		if pattern_index > #opponent.pattern then
			pattern_index = 1
		end
		if health.player <= 0 or health.opponent <= 0 then
			print("death")
			break
		end
	end
	
	print("sending to ", sender)
	msg.post(sender, "game_finished", { health = health })
end


function init(self)
	self.gesture = gesture.create(rps.GESTURES)
end

function update(self, dt)
	flow.update(dt)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == hash("start") then
		flow(function() normal_game(message, sender) end)
	end
end

function on_input(self, action_id, action)
	flow.on_input(action_id, action)
	local g = self.gesture.on_input(action_id, action)
	if g then
		GESTURE.trigger(g)
	end
end
