local flow = require "ludobits.m.flow"
local gesture = require "game.gesture"
local monarch = require "monarch.monarch"
local rps = require "game.rps"
local opponents = require "game.opponents"
local signals = require "controller.signals"
local camera = require "orthographic.camera"


local function show_dialog(portrait, text)
	monarch.show(hash("dialog"), nil, { text = text, portrait = portrait })
	flow.until_message(monarch.FOCUS_GAINED)
end

local function point_to_screen(p)
	return vmath.vector3(35 + (p.x * 250), 284 + ((p.y - 0.5) * 250), 0)
end

local function show_gesture(symbol)
	local gesture = rps.get(symbol)
	particlefx.play("touch#particlefx")
	local points = gesture.points
	go.set_position(point_to_screen(points[1]), "touch")
	for i=2,#gesture.points do
		local pos = point_to_screen(points[i])
		flow.go_animate("touch", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, 0.2)
	end
	particlefx.stop("touch#particlefx")
end

local function tutorial(self, message)
	msg.post(".", "acquire_input_focus")

	local opponent = opponents.get(message.opponent)

	show_dialog(opponent.portrait, {
		"Welcome to the Academy of Rock, Paper & Scissors!",
		"Ok, lets get started!\n\nThe first rule of RPS is that Rock beats Scissors. Got it?",
		"Now pay attention. The sign for Rock looks like this. Ready?",
	})
	flow.delay(2)

	while true do
		flow.delay(0.8)
		show_gesture(rps.ROCK)
		flow.delay(2)
		show_dialog(opponent.portrait, { "Ok? Now it is your turn. Make a Rock for me. Go on, I'm waiting." })
		self.showpfx = true
		local _, message = flow.until_message(hash("gesture"))
		self.showpfx = false
		if message.gesture.symbol == rps.ROCK then
			break
		end
		show_dialog(opponent.portrait, { "Now pay attention. The sign for Rock looks like this. Ready?" })
	end

	show_dialog(opponent.portrait, { "Excellent! The second rule of RPS is that Paper beats Rock.\n\nThe sign for Paper looks like this." })
	while true do
		flow.delay(0.8)
		show_gesture(rps.PAPER)
		flow.delay(2)
		show_dialog(opponent.portrait, { "Easy, right? Let me see if you understood. Hurry up! I haven't got all day" })
		self.showpfx = true
		local _, message = flow.until_message(hash("gesture"))
		self.showpfx = false
		if message.gesture.symbol == rps.PAPER then
			break
		end
		show_dialog(opponent.portrait, { "No no no! I hate repeating myself but here we go again. Ready?" })
	end

	show_dialog(opponent.portrait, { "Brilliant! The third rule of RPS is that Scissors beats Paper.\n\nScissors looks like this." })
	while true do
		flow.delay(0.8)
		show_gesture(rps.SCISSORS)
		flow.delay(2)
		show_dialog(opponent.portrait, { "Got it? Show me how to do Scissors. And don't mess up." })
		self.showpfx = true
		local _, message = flow.until_message(hash("gesture"))
		self.showpfx = false
		if message.gesture.symbol == rps.SCISSORS then
			break
		end
		show_dialog(opponent.portrait, { "No, that's not what I showed you. Pay attention! Ok?" })
	end

	show_dialog(opponent.portrait, { [[You're a natural! I think you're ready for a proper fight!

I'm going to throw some Rocks, Papers and Scissors your way.

Let me know when you are ready.]] })

	monarch.show(hash("game"), nil, message)
end


function init(self)
	self.gesture = gesture.create(rps.GESTURES)
	flow(function()
		tutorial(self, monarch.data(hash("tutorial")))
	end)
end

function update(self, dt)
	flow.update(dt)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == hash("start") then
		flow(function() tutorial(self, message) end)
	end
end

function on_input(self, action_id, action)
	flow.on_input(action_id, action)
	if action_id == hash("touch") and self.showpfx then
		local world = camera.screen_to_world(hash("/camera"), vmath.vector3(action.x, action.y, 0))
		go.set_position(world, "touch")
		if action.pressed then
			particlefx.play("touch#particlefx")
		elseif action.released then
			particlefx.stop("touch#particlefx")
		end
	end
	local g = self.gesture.on_input(action_id, action)
	if g then
		msg.post("#", "gesture", { gesture = g })
	end
end
