local gooey = require "gooey.gooey"
local opponents = require "game.opponents"
local settings = require "utils.rps_settings"
local transitions = require "monarch.transitions.gui"
local monarch = require "monarch.monarch"


function init(self)
	gooey.acquire_input()
	
	local duration = 0.8
	self.transition = transitions.create(gui.get_node("root"))
		.show_in(transitions.slide_in_bottom, gui.EASING_OUTQUAD, duration, 0.5)
		.back_in(transitions.slide_in_bottom, gui.EASING_OUTQUAD, duration, 0.5)
		.show_out(transitions.slide_out_bottom, gui.EASING_INQUAD, duration, 0)
		.back_out(transitions.slide_out_bottom, gui.EASING_INQUAD, duration, 0)
	

	self.items = {}
	settings.unlock(opponents.IDS[1])
	for i,opponent_id in ipairs(opponents.IDS) do
		local opponent = opponents.get(opponent_id)
		if settings.is_unlocked(opponent_id) then
			gui.set_color(gui.get_node("opponent" .. i .. "/panel"), vmath.vector4(1))
			gui.set_enabled(gui.get_node("opponent" .. i .. "/portrait"), true)
			gui.play_flipbook(gui.get_node("opponent" .. i .. "/portrait"), opponent.portrait)
			gui.set_text(gui.get_node("opponent" .. i .. "/name"), opponent.name)
		else
			gui.set_color(gui.get_node("opponent" .. i .. "/panel"), vmath.vector4(0.35, 0.35, 0.35, 1))
			gui.set_enabled(gui.get_node("opponent" .. i .. "/portrait"), false)
			gui.set_text(gui.get_node("opponent" .. i .. "/name"), "LOCKED")
		end

		table.insert(self.items, "opponent" .. i .. "/panel")
	end
end

function on_message(self, message_id, message, sender)
	self.transition.handle(message_id, message, sender)
end


function on_input(self, action_id, action)
	gooey.list("listroot", self.items, action_id, action, function(list)
		local opponent_id = opponents.IDS[list.selected_item]
		if settings.is_unlocked(opponent_id) then
			local opponent = opponents.get(opponent_id)
			monarch.show(opponent.screen, nil, { opponent = opponent_id, player_health = 10 })
		end
	end)
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
